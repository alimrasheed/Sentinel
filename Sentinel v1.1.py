non_analysables = 0  # number of non analysable commentsneutrals = 0  # number of neutral commentspositives = 0  # number of positive commentsnegatives = 0  # number of negative commentsdatarows = []  # list for storing comments and reportsclass Sentinel:    page = ""    def __init__(self):        pass    def inputuser(self):        print("Enter the Instagram username:")        username = input(">> ")        return username    def browser(self, username):        print("Select your Browser:")        print("(1)Chrome\n(2)Firefox\n(3)Edge\n(4)Safari")        choice = int(input(">> "))        if choice == 1:            page = webdriver.Chrome()            page.implicitly_wait(10)            page.get("https://www.instagram.com/" + username + "/?hl=en")        elif choice == 2:            page = webdriver.Firefox()            page.implicitly_wait(10)            page.get("https://www.instagram.com/" + username + "/?hl=en")        elif choice == 3:            page = webdriver.Edge()            page.implicitly_wait(10)            page.get("https://www.instagram.com/" + username + "/?hl=en")        elif choice == 4:            page = webdriver.Safari()            page.implicitly_wait(10)            page.get("https://www.instagram.com/" + username + "/?hl=en")        else:            print("Invalid Input!")        self.chkprivacy(page)    def chkprivacy(self, page):        try:            private = page.find_element_by_tag_name('h2')            if private.text == 'This Account is Private':                page.get('https://www.google.com/search?q=stalker+meaning')                time.sleep(20)            elif private.text == "Sorry, this page isn't available.":                print("An account of this username does not exist. Please retry.")        except NoSuchElementException:            page.find_element_by_class_name("Ls00D").click()  # closes the login or sign up prompt            page.find_element_by_class_name("_9AhH0").click()  # clicks on first post            i = 1            try:                os.mkdir(username)            except FileExistsError:                shutil.rmtree(username)                os.mkdir(username)            os.chdir(username)            self.excomm(username, page, i)    def excomm(self, username, page, i):        global non_analysables        global neutrals        global positives        global negatives        global datarows        while (True):            try:                print("Comments are being loaded...")                page.find_element_by_class_name("lnrre").click()            except NoSuchElementException:                print("Loading complete...")                break        print("Comments are being extracted...")        data = page.page_source        soup = BeautifulSoup(data, "lxml")        comments = soup.find_all("div", {"class": "C4VMK"})        for items in comments:            comment = (items.find("span").text)            if not items.find("a").text == username:  # this condition filters all comments posted by the user                self.findsentiment(comment)            else:                continue        with open(f'{username}({i}).txt', 'w', encoding="utf-8") as filehandle:            filehandle.writelines("%s\n" % (','.join(data)) for data in datarows)            filehandle.writelines("\n\n-----SUMMARY-----\n")            filehandle.writelines(f'Number of positive comments are {positives}')            filehandle.writelines(f'\nNumber of negative comments are {negatives}')            filehandle.writelines(f'\nNumber of neutral comments are {neutrals}')            filehandle.writelines(f"\nNumber of comments which could'nt be analysed are {non_analysables}")            filehandle.writelines(f"\nURL for this post is--> {page.current_url}")        filehandle.close()        non_analysables = 0  # number of non analysable comments        neutrals = 0  # number of neutral comments        positives = 0  # number of positive comments        negatives = 0  # number of negative comments        datarows = []  # list for storing comments and reports        i = i + 1        print("A report has been generated")        self.rightswipe(page, i)    def rightswipe(self, page, i):        try:            page.find_element_by_link_text("Next").click()            self.excomm(username, page, i)        except NoSuchElementException:            print("All comments have been extracted.")    def findsentiment(self, comment):        global non_analysables, report        global neutrals        global positives        global negatives        global datarows        blob = TextBlob(comment)        s = blob.sentiment.polarity        if s < 0.00:            negatives += 1            report = "Comment is negative"        elif s > 0.00:            positives += 1            report = "Comment is positive"        elif s == 0.00:            try:                if blob.detect_language() == "en":                    neutrals += 1                    report = "Comment is neutral"                else:                    non_analysables += 1                    report = "Comment cannot be analysed"            except TranslatorError:                non_analysables += 1                report = "Comment cannot be analysed"        datarows.append([comment, report])if __name__ == '__main__':    from selenium import webdriver    from selenium.webdriver.support.ui import WebDriverWait    from selenium.common.exceptions import NoSuchElementException    from bs4 import BeautifulSoup    import os    import shutil    from textblob.exceptions import TranslatorError    from textblob import TextBlob    import time    print("\n         ----WELCOME TO SENTINEL v1.1----")    print("Note--> This highly sophisticated and complex program\n"          "requires a simple webdriver for the respective browser")    print("\nYou can download the webdriver from the link --> "          "https://selenium-python.readthedocs.io/installation.html#drivers\n\n")    sentinel = Sentinel()    username = sentinel.inputuser()    sentinel.browser(username)